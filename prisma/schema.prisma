// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  age           Int?
  gender        String?
  height        Float?    // in cm
  weight        Float?    // in kg
  activityLevel String?   // sedentary, lightly_active, moderately_active, very_active, extremely_active
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  mealPlans     MealPlan[]
  recipes       Recipe[]
  customFoods   FoodItem[] @relation("CustomFoods")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FoodItem {
  id          String   @id @default(cuid())
  name        String
  brand       String?
  barcode     String?  @unique
  calories    Float
  protein     Float    // in grams
  carbs       Float    // in grams
  fat         Float    // in grams
  fiber       Float    // in grams
  sugar       Float    // in grams
  sodium      Float    // in mg
  servingSize Float    // in grams
  servingUnit String   // grams, cups, pieces, etc.
  isCustom    Boolean  @default(false)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?    @relation("CustomFoods", fields: [createdBy], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  searchIndex String?  @db.Text // For full-text search

  @@index([name])
  @@index([barcode])
  @@index([searchIndex])
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String?
  instructions String  @db.Text
  prepTime    Int?     // in minutes
  cookTime    Int?     // in minutes
  servings    Int
  difficulty  String?  // easy, medium, hard
  category    String?  // breakfast, lunch, dinner, snack
  imageUrl    String?
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  mealPlans   MealPlanItem[]

  @@index([name])
  @@index([category])
}

model Ingredient {
  id       String   @id @default(cuid())
  quantity Float
  unit     String
  foodId   String
  recipeId String

  // Relations
  food     FoodItem @relation(fields: [foodId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([foodId, recipeId])
}

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  items       MealPlanItem[]

  @@index([startDate])
  @@index([endDate])
}

model MealPlanItem {
  id         String   @id @default(cuid())
  date       DateTime
  mealType   String   // breakfast, lunch, dinner, snack
  quantity   Float    @default(1)
  mealPlanId String
  recipeId   String?

  // Relations
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe     Recipe?  @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  @@index([date])
  @@index([mealType])
}
